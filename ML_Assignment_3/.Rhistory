Vehicles_data = read.csv("C:\\Users\\Urza\\OneDrive\\BA 64060 Fundementals of Machine Learning\\Module 4\\Assignment 3\\Vehicles_Sales.csv")
library(caret)
Vehicles_data = read.csv("C:\\Users\\Urza\\OneDrive\\BA 64060 Fundementals of Machine Learning\\Module 4\\Assignment 3\\Vehicles_Sales.csv")
Vehicles_data = Vehicles_data[,-c(9.10)]
Vehicles_data$DEALSIZE = as.factor(Vehicles_data$DEALSIZE)
groups = dummyVars(~., data = Vehicles_data)
Vehicles_data = as.data.frame(predict(groups, Vehicles_data))
View(Vehicles_data)
View(Vehicles_data)
Vehicles_data = read.csv("C:\\Users\\Urza\\OneDrive\\BA 64060 Fundementals of Machine Learning\\Module 4\\Assignment 3\\Vehicles_Sales.csv")
Vehicles_data = Vehicles_data[,-c(9.10)]
#Vehicles_data$DEALSIZE = as.factor(Vehicles_data$DEALSIZE)
#groups = dummyVars(~., data = Vehicles_data)
#Vehicles_data = as.data.frame(predict(groups, Vehicles_data))
View(Vehicles_data)
Vehicles_data = read.csv("C:\\Users\\Urza\\OneDrive\\BA 64060 Fundementals of Machine Learning\\Module 4\\Assignment 3\\Vehicles_Sales.csv")
Vehicles_data = Vehicles_data[,-c(9,10)]
#Vehicles_data$DEALSIZE = as.factor(Vehicles_data$DEALSIZE)
#groups = dummyVars(~., data = Vehicles_data)
#Vehicles_data = as.data.frame(predict(groups, Vehicles_data))
View(Vehicles_data)
Vehicles_data = read.csv("C:\\Users\\Urza\\OneDrive\\BA 64060 Fundementals of Machine Learning\\Module 4\\Assignment 3\\Vehicles_Sales.csv")
Vehicles_data = Vehicles_data[,-c(9,10)]
Vehicles_data$DEALSIZE = as.factor(Vehicles_data$DEALSIZE)
groups = dummyVars(~., data = Vehicles_data)
Vehicles_data = as.data.frame(predict(groups, Vehicles_data))
View(Vehicles_data)
train_index = createDataPartition(Vehicles_data$STATUS, p = 0.5, list = FALSE)
trainDF = Vehicles_data[train_index,]
tempdf = Vehicles_data[-train_index,]
validation_index = createDataPartition(tempdf$STATUS, p = 0.3, list = FALSE)
validationDF = tempdf[validation_index,]
testDF = tempdf[-validation_index,]
train_index = createDataPartition(Vehicles_data$STATUS, p = 0.5, list = FALSE)
trainDF = Vehicles_data[train_index,]
tempdf = Vehicles_data[-train_index,]
validation_index = createDataPartition(tempdf$STATUS, p = 0.3, list = FALSE)
validationDF = tempdf[validation_index,]
testDF = tempdf[-validation_index,]
rm(tempdf)
train_index = createDataPartition(Vehicles_data$STATUS, p = 0.5, list = FALSE)
trainDF = Vehicles_data[train_index,]
tempdf = Vehicles_data[-train_index,]
validation_index = createDataPartition(tempdf$STATUS, p = 0.3, list = FALSE)
validationDF = tempdf[validation_index,]
testDF = tempdf[-validation_index,]
rm(tempdf)
train_index = createDataPartition(Vehicles_data$STATUS, p = 0.5, list = FALSE)
trainDF = Vehicles_data[train_index,]
tempdf = Vehicles_data[-train_index,]
validation_index = createDataPartition(tempdf$STATUS, p = 0.3, list = FALSE)
validationDF = tempdf[validation_index,]
testDF = tempdf[-validation_index,]
rm(tempdf)
set.seed(123)
Vehicles_data = read.csv("C:\\Users\\Urza\\OneDrive\\BA 64060 Fundementals of Machine Learning\\Module 4\\Assignment 3\\Vehicles_Sales.csv")
Vehicles_data = Vehicles_data[,-c(9,10)]
Vehicles_data$DEALSIZE = as.factor(Vehicles_data$DEALSIZE)
groups = dummyVars(~., data = Vehicles_data)
Vehicles_data = as.data.frame(predict(groups, Vehicles_data))
train_index = createDataPartition(Vehicles_data$STATUS, p = 0.5, list = FALSE)
trainDF = Vehicles_data[train_index,]
tempdf = Vehicles_data[-train_index,]
validation_index = createDataPartition(tempdf$STATUS, p = 0.3, list = FALSE)
validationDF = tempdf[validation_index,]
testDF = tempdf[-validation_index,]
rm(tempdf)
train_index = createDataPartition(Vehicles_data$STATUS, p = 0.5, list = FALSE)
trainDF = Vehicles_data[train_index,]
tempdf = Vehicles_data[-train_index,]
validation_index = createDataPartition(tempdf$STATUS, p = 0.3, list = FALSE)
validationDF = tempdf[validation_index,]
testDF = tempdf[-validation_index,]
rm(tempdf)
train_index = createDataPartition(Vehicles_data$STATUS, p = 0.5, list = FALSE)
trainDF = Vehicles_data[train_index,]
tempdf = Vehicles_data[-train_index,]
validation_index = createDataPartition(tempdf$STATUS, p = 0.3, list = FALSE)
validationDF = tempdf[validation_index,]
testDF = tempdf[-validation_index,]
rm(tempdf)
View(testDF)
View(testDF)
?preProcess
trainDF_norm = trainDF[,-6]
validationDF_norm = validationDF[,-6]
testDF_norm = testDF[,-6]
norm_values = preProcess(trainDF_norm, method=c("scale"))
View(norm_values)
View(norm_values)
trainDF_norm = trainDF[,-6]
validationDF_norm = validationDF[,-6]
testDF_norm = testDF[,-6]
norm_values = preProcess(trainDF_norm, method= "scale")
View(norm_values)
View(trainDF_norm)
trainDF_norm = trainDF[,-6]
validationDF_norm = validationDF[,-6]
testDF_norm = testDF[,-6]
norm_values = preProcess(trainDF_norm, method= "scale")
testDF_norm = predict(norm_values, testDF_norm)
View(testDF_norm)
trainDF_norm = trainDF[,-6]
validationDF_norm = validationDF[,-6]
testDF_norm = testDF[,-6]
norm_values = preProcess(trainDF_norm, method= c("center", "scale")
testDF_norm = predict(norm_values, testDF_norm)
trainDF_norm = trainDF[,-6]
validationDF_norm = validationDF[,-6]
testDF_norm = testDF[,-6]
norm_values = preProcess(trainDF_norm, method= c("center","scale"))
testDF_norm = predict(norm_values, testDF_norm)
View(testDF_norm)
trainDF_norm = trainDF[,-6]
validationDF_norm = validationDF[,-6]
testDF_norm = testDF[,-6]
norm_values = preProcess(trainDF_norm, method= c("center","scale"))
testDF_norm = predict(norm_values, testDF_norm)
validationDF_norm = predict(norm_values, validationDF_norm)
View(validationDF_norm)
trainDF_norm = trainDF[,-6]
validationDF_norm = validationDF[,-6]
testDF_norm = testDF[,-6]
norm_values = preProcess(trainDF_norm, method= c("center","scale"))
testDF_norm = predict(norm_values, testDF_norm)
validationDF_norm = predict(norm_values, validationDF_norm)
trainDF_norm = predict(norm_values, trainDF_norm)
View(testDF_norm)
trainDF_norm = trainDF[,-6]
validationDF_norm = validationDF[,-6]
testDF_norm = testDF[,-6]
norm_values = preProcess(trainDF_norm, method= c("center","scale"))
testDF_norm = predict(norm_values, testDF[,-6])
validationDF_norm = predict(norm_values, validationDF_norm)
trainDF_norm = predict(norm_values, trainDF_norm)
View(testDF_norm)
#trainDF_norm = trainDF[,-6]
#validationDF_norm = validationDF[,-6]
#testDF_norm = testDF[,-6]
norm_values = preProcess(trainDF[,-6], method= c("center","scale"))
testDF_norm = predict(norm_values, testDF[,-6])
validationDF_norm = predict(norm_values, validationDF[,-6])
trainDF_norm = predict(norm_values, trainDF[,-6])
View(testDF_norm)
install.packages("class")
library(caret)
library(class)
library(caret)
library(class)
new_vehicle = data.frame(
ORDERNUMBER = 10322,
QUANTITYORDERED=50,
PRICEEACH=100,
ORDERLINENUMBER=6,
SALES=12536.5,
QTR_ID=4,
MONTH_ID=11,
MSRP=127,
DEALSIZE.Large=1,
DEALSIZE.Small=0,
DEALSIZE.Medium=0
)
new_vehicle_norm = new_vehicle
new_vehicle_norm = predict(norm_values, new_vehicle_norm)
View(new_vehicle_norm)
?knn
new_vehicle = data.frame(
ORDERNUMBER = 10322,
QUANTITYORDERED=50,
PRICEEACH=100,
ORDERLINENUMBER=6,
SALES=12536.5,
QTR_ID=4,
MONTH_ID=11,
MSRP=127,
DEALSIZE.Large=1,
DEALSIZE.Small=0,
DEALSIZE.Medium=0
)
new_vehicle_norm = new_vehicle
new_vehicle_norm = predict(norm_values, new_vehicle_norm)
knn_pred1 = class::knn(train = trainDF_norm, test = new_vehicle_norm, cl = trainDF$STATUS, k = 1)
knn_pred1
new_vehicle = data.frame(
ORDERNUMBER = 10322,
QUANTITYORDERED=50,
PRICEEACH=100,
ORDERLINENUMBER=6,
SALES=12536.5,
QTR_ID=4,
MONTH_ID=11,
MSRP=127,
DEALSIZE.Large=1,
DEALSIZE.Small=0,
DEALSIZE.Medium=0
)
new_vehicle_norm = new_vehicle
new_vehicle_norm = predict(norm_values, new_vehicle_norm)
knn_pred1 = class::knn(train = trainDF_norm, test = new_vehicle_norm, cl = 1, k = 1)
new_vehicle = data.frame(
ORDERNUMBER = 10322,
QUANTITYORDERED=50,
PRICEEACH=100,
ORDERLINENUMBER=6,
SALES=12536.5,
QTR_ID=4,
MONTH_ID=11,
MSRP=127,
DEALSIZE.Large=1,
DEALSIZE.Small=0,
DEALSIZE.Medium=0
)
new_vehicle_norm = new_vehicle
new_vehicle_norm = predict(norm_values, new_vehicle_norm)
knn_pred1 = class::knn(train = trainDF_norm, test = new_vehicle_norm, cl = trainDF$STATUS, k = 1)
knn_pred1
actual = testDF$STATUS
cm = table(actual, knn_pred1)
accuracyDF = data.frame(k = seq(1,15,1), overallAccuracy = rep(0,15))
View(accuracyDF)
?confusionMatrix
accuracyDF = data.frame(k = seq(1,15,1), overallAccuracy = rep(0,15))
for(i in 1:15){
knn_pred = class::knn(train = trainDF_norm, test = validationDF_norm, cl = validationDF$STATUS)
accuracyDF[i,2] = confusionMatrix(testDF$STATUS, knn_pred)
}
accuracyDF = data.frame(k = seq(1,15,1), overallAccuracy = rep(0,15))
for(i in 1:15){
knn_pred = class::knn(train = trainDF_norm, test = validationDF_norm, cl = trainDF$STATUS)
accuracyDF[i,2] = confusionMatrix(trainDF$STATUS, knn_pred)
}
accuracyDF = data.frame(k = seq(1,15,1), overallAccuracy = rep(0,15))
for(i in 1:15) {
knn_pred = class::knn(train = trainDF_norm, test = validationDF_norm, cl = trainDF$STATUS)
accuracyDF[i,2] = confusionMatrix(trainDF$STATUS, knn_pred)
}
accuracyDF = data.frame(k = seq(1,15,1), overallAccuracy = rep(0,15))
for(i in 1:15) {
knn_pred = class::knn(train = trainDF_norm, test = validationDF_norm, cl = trainDF$STATUS, k = i)
accuracyDF[i,2] = confusionMatrix(trainDF$STATUS, knn_pred)
}
accuracyDF = data.frame(k = seq(1,15,1), overallAccuracy = rep(0,15))
for(i in 1:15) {
knn_pred = class::knn(train = trainDF_norm, test = validationDF_norm, cl = trainDF$STATUS, k = i)
#accuracyDF[i,2] = confusionMatrix(trainDF$STATUS, knn_pred)
}
accuracyDF = data.frame(k = seq(1,15,1), overallAccuracy = rep(0,15))
for(i in 1:15) {
accuracyDF[i,2] = class::knn(train = trainDF_norm, test = validationDF_norm, cl = trainDF$STATUS, k = i)
#confusionMatrix(trainDF$STATUS, knn_pred)
}
accuracyDF = data.frame(k = seq(1,15,1), overallAccuracy = rep(0,15))
for(i in 1:15) {
knn_pred = class::knn(train = trainDF_norm, test = validationDF_norm, cl = trainDF$STATUS, k = i)
#accuracyDF[i,2] = confusionMatrix(trainDF$STATUS, knn_pred)
}
accuracyDF = data.frame(k = seq(1,15,1), overallAccuracy = rep(0,15))
for(i in 1:15) {
knn_pred = class::knn(train = trainDF_norm, test = validationDF_norm, cl = trainDF$STATUS, k = i)
knn_pred
#accuracyDF[i,2] = confusionMatrix(trainDF$STATUS, knn_pred)
}
accuracyDF = data.frame(k = seq(1,15,1), overallAccuracy = rep(0,15))
for(i in 1:15) {
knn_pred = class::knn(train = trainDF_norm, test = validationDF_norm, cl = trainDF$STATUS, k = 2)
knn_pred
#accuracyDF[i,2] = confusionMatrix(trainDF$STATUS, knn_pred)
}
accuracyDF = data.frame(k = seq(1,15,1), overallAccuracy = rep(0,15))
for(i in 1:15) {
knn_pred = class::knn(train = trainDF_norm, test = validationDF_norm, cl = trainDF$STATUS, k = i)
knn_pred
#accuracyDF[i,2] = confusionMatrix(trainDF$STATUS, knn_pred)
}
knn_pred
accuracyDF = data.frame(k = seq(1,15,1), overallAccuracy = rep(0,15))
for(i in 1:15) {
knn_pred = class::knn(train = trainDF_norm, test = validationDF_norm, cl = trainDF$STATUS, k = i)
knn_pred
#accuracyDF[i,2] = confusionMatrix(trainDF$STATUS, knn_pred)
}
knn_pred
confusionMatrix(trainDF$STATUS, knn_pred)
accuracyDF = data.frame(k = seq(1,15,1), overallAccuracy = rep(0,15))
for(i in 1:15) {
knn_pred = class::knn(train = trainDF_norm, test = validationDF_norm, cl = validationDF$STATUS, k = i)
knn_pred
#accuracyDF[i,2] = confusionMatrix(trainDF$STATUS, knn_pred)
}
accuracyDF = data.frame(k = seq(1,15,1), overallAccuracy = rep(0,15))
for(i in 1:15) {
knn_pred = class::knn(train = trainDF_norm, test = validationDF_norm, cl = trainDF$STATUS, k = i)
knn_pred
#accuracyDF[i,2] = confusionMatrix(trainDF$STATUS, knn_pred)
}
knn_pred
confusionMatrix(validationDF$STATUS, knn_pred)
accuracyDF = data.frame(k = seq(1,15,1), overallAccuracy = rep(0,15))
for(i in 1:15) {
knn_pred = class::knn(train = trainDF_norm, test = validationDF_norm, cl = trainDF$STATUS, k = i)
knn_pred
#accuracyDF[i,2] = confusionMatrix(trainDF$STATUS, knn_pred)
}
knn_pred
confusionMatrix(knn_pred, trainDF$STATUS)
dim(knn_pred)
dim(trainDF)
dim(trainDF$STATUS)
View(trainDF_norm)
View(trainDF)
str(trainDF)
set.seed(123)
Vehicles_data = read.csv("C:\\Users\\Urza\\OneDrive\\BA 64060 Fundementals of Machine Learning\\Module 4\\Assignment 3\\Vehicles_Sales.csv")
Vehicles_data = Vehicles_data[,-c(9,10)]
Vehicles_data$DEALSIZE = as.factor(Vehicles_data$DEALSIZE)
Vehicles_data$STATUS = as.factor(Vehicles_data$STATUS)
groups = dummyVars(~., data = Vehicles_data)
Vehicles_data = as.data.frame(predict(groups, Vehicles_data))
train_index = createDataPartition(Vehicles_data$STATUS, p = 0.5, list = FALSE)
set.seed(123)
Vehicles_data = read.csv("C:\\Users\\Urza\\OneDrive\\BA 64060 Fundementals of Machine Learning\\Module 4\\Assignment 3\\Vehicles_Sales.csv")
Vehicles_data = Vehicles_data[,-c(9,10)]
Vehicles_data$DEALSIZE = as.factor(Vehicles_data$DEALSIZE)
#Vehicles_data$STATUS = as.factor(Vehicles_data$STATUS)
groups = dummyVars(~., data = Vehicles_data)
Vehicles_data = as.data.frame(predict(groups, Vehicles_data))
train_index = createDataPartition(Vehicles_data$STATUS, p = 0.5, list = FALSE)
trainDF = Vehicles_data[train_index,]
tempdf = Vehicles_data[-train_index,]
validation_index = createDataPartition(tempdf$STATUS, p = 0.3, list = FALSE)
validationDF = tempdf[validation_index,]
testDF = tempdf[-validation_index,]
rm(tempdf)
#trainDF_norm = trainDF[,-6]
#validationDF_norm = validationDF[,-6]
#testDF_norm = testDF[,-6]
norm_values = preProcess(trainDF[,-6], method= c("center","scale"))
testDF_norm = predict(norm_values, testDF[,-6])
validationDF_norm = predict(norm_values, validationDF[,-6])
trainDF_norm = predict(norm_values, trainDF[,-6])
new_vehicle = data.frame(
ORDERNUMBER = 10322,
QUANTITYORDERED=50,
PRICEEACH=100,
ORDERLINENUMBER=6,
SALES=12536.5,
QTR_ID=4,
MONTH_ID=11,
MSRP=127,
DEALSIZE.Large=1,
DEALSIZE.Small=0,
DEALSIZE.Medium=0
)
new_vehicle_norm = new_vehicle
new_vehicle_norm = predict(norm_values, new_vehicle_norm)
knn_pred1 = class::knn(train = trainDF_norm, test = new_vehicle_norm, cl = trainDF$STATUS, k = 1)
knn_pred1
accuracyDF = data.frame(k = seq(1,15,1), overallAccuracy = rep(0,15))
for(i in 1:15) {
knn_pred = class::knn(train = trainDF_norm, test = validationDF_norm, cl = trainDF$STATUS, k = i)
knn_pred
#accuracyDF[i,2] = confusionMatrix(trainDF$STATUS, knn_pred)
}
knn_pred = as.factor(knn_pred)
trainDF$STATUS = as.factor(trainDF$STATUS)
confusionMatrix(knn_pred, trainDF$STATUS)
accuracyDF = data.frame(k = seq(1,15,1), overallAccuracy = rep(0,15))
for(i in 1:15) {
knn_pred = class::knn(train = trainDF_norm, test = validationDF_norm, cl = trainDF$STATUS, k = i)
accuracyDF[i, 2] = confusionMatrix(knn_pred, as.factor(validationDF$STATUS), positive = "1")$overall[1]
#accuracyDF[i,2] = confusionMatrix(trainDF$STATUS, knn_pred)
}
which(accuracyDF[,2] == max(accuracyDF[,2]))
#plot(accuracy.df$k,accuracy.df$overallaccuracy)
#knn_pred = as.factor(knn_pred)
#trainDF$STATUS = as.factor(trainDF$STATUS)
#confusionMatrix(knn_pred, trainDF$STATUS)
accuracyDF
accuracyDF = data.frame(k = seq(1,15,1), overallAccuracy = rep(0,15))
for(i in 1:15) {
knn_pred = class::knn(train = trainDF_norm, test = validationDF_norm, cl = trainDF$STATUS, k = i)
accuracyDF[i, 2] = confusionMatrix(knn_pred, as.factor(validationDF$STATUS), positive = "1")$overall[1]
}
which(accuracyDF[,2] == max(accuracyDF[,2]))
accuracyDF[which(accuracyDF[,2] == max(accuracyDF[,2])),]
?knn
#Created a data frame that contains values of k from 1 - 15
accuracyDF = data.frame(k = seq(1,15,1), overallAccuracy = rep(0,15))
#Using a for loop try each value of k and add to the data frame the accuracy of correct predictions
for(i in 1:15) {
knn_pred = class::knn(train = trainDF_norm, test = testDF_norm, cl = trainDF$STATUS, k = i)
accuracyDF[i, 2] = confusionMatrix(knn_pred, as.factor(testDF$STATUS), positive = "1")$overall[1]
}
# display the value of k and the overall accuracy
accuracyDF[which(accuracyDF[,2] == max(accuracyDF[,2])),]
#Created a data frame that contains values of k from 1 - 15
accuracyDF = data.frame(k = seq(1,15,1), overallAccuracy = rep(0,15))
#Using a for loop try each value of k and add to the data frame the accuracy of correct predictions
for(i in 1:15) {
knn_pred = class::knn(train = trainDF_norm, test = validationDF_norm, cl = trainDF$STATUS, k = i)
accuracyDF[i, 2] = confusionMatrix(knn_pred, as.factor(validationDF$STATUS), positive = "1")$overall[1]
}
# display the value of k and the overall accuracy
accuracyDF[which(accuracyDF[,2] == max(accuracyDF[,2])),]
library(caret)
library(class)
#Set seed to have consistent numbers while testing
set.seed(123)
#imported Vehicles_Sales.csv in to a data frame named Vehicles_data
Vehicles_data = read.csv("C:\\Users\\Urza\\OneDrive\\BA 64060 Fundementals of Machine Learning\\Module 4\\Assignment 3\\Vehicles_Sales.csv")
#Dropped YEAR_ID and PRODUCTLINE from the Vehicles_data frame
Vehicles_data = Vehicles_data[,-c(9,10)]
#Converted DEALSIZE to a factor
Vehicles_data$DEALSIZE = as.factor(Vehicles_data$DEALSIZE)
#Created dummyVars for the data
groups = dummyVars(~., data = Vehicles_data)
#applied the dummyvars to the data for use
Vehicles_data = as.data.frame(predict(groups, Vehicles_data))
#Partitioned the data in half and stratified based on the target variable
train_index = createDataPartition(Vehicles_data$STATUS, p = 0.5, list = FALSE)
#Half of the data will be used for training
trainDF = Vehicles_data[train_index,]
#The other half will be further partitioned into validation and testing
tempdf = Vehicles_data[-train_index,]
#Partitioned the remaining data into validation index of 30% stratified based on the target variable to stay consistent
validation_index = createDataPartition(tempdf$STATUS, p = 0.3, list = FALSE)
#Created the validation data frame
validationDF = tempdf[validation_index,]
#Created the testDF using the left over data
testDF = tempdf[-validation_index,]
#Removed the temp data frame
rm(tempdf)
#created normalized values using z-score normalization, removing STATUS from the data first.
norm_values = preProcess(trainDF[,-6], method= c("center","scale"))
#Based on the normalized values from the training set testing, validation, and training normalized data frames are created.
#Making sure STATUS is removed from each before creation.
testDF_norm = predict(norm_values, testDF[,-6])
validationDF_norm = predict(norm_values, validationDF[,-6])
trainDF_norm = predict(norm_values, trainDF[,-6])
#A new data frame containing one observation is created to see if our model can classify it correctly
new_vehicle = data.frame(
ORDERNUMBER = 10322,
QUANTITYORDERED=50,
PRICEEACH=100,
ORDERLINENUMBER=6,
SALES=12536.5,
QTR_ID=4,
MONTH_ID=11,
MSRP=127,
DEALSIZE.Large=1,
DEALSIZE.Small=0,
DEALSIZE.Medium=0
)
#A new variable is created so we are not manipulating the original
new_vehicle_norm = new_vehicle
#normalizing or new vehicle that we want to classify
new_vehicle_norm = predict(norm_values, new_vehicle_norm)
#Predicting the nearest neighbor
knn_pred_k_1 = class::knn(train = trainDF_norm, test = new_vehicle_norm, cl = trainDF$STATUS, k = 1)
#The Nearest Neighbor
knn_pred_k_1
#Created a data frame that contains values of k from 1 - 15
accuracyDF = data.frame(k = seq(1,15,1), overallAccuracy = rep(0,15))
#Using a for loop try each value of k and add to the data frame the accuracy of correct predictions
#We use the training and validation sets for this purpose so we can keep our test data unseen
for(i in 1:15) {
knn_pred = class::knn(train = trainDF_norm, test = validationDF_norm, cl = trainDF$STATUS, k = i)
accuracyDF[i, 2] = confusionMatrix(knn_pred, as.factor(validationDF$STATUS), positive = "1")$overall[1]
}
# display the value of k and the overall accuracy
accuracyDF[which(accuracyDF[,2] == max(accuracyDF[,2])),]
