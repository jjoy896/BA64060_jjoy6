---
title: "ML Assignment 3"
author: "Jacob Joy"
output:
  html_document:
    df_print: paged
---
# Packages
```{r}
library(caret)
library(class)
```

# Setup
```{r}
#Set seed to have consistent numbers while testing
set.seed(123)

#imported Vehicles_Sales.csv in to a data frame named Vehicles_data
Vehicles_data = read.csv("C:\\Users\\juanm\\OneDrive\\BA 64060 Fundementals of Machine Learning\\Module 4\\Assignment 3\\Vehicles_Sales.csv")

#Dropped YEAR_ID and PRODUCTLINE from the Vehicles_data frame
Vehicles_data = Vehicles_data[,-c(9,10)]

#Converted DEALSIZE to a factor
Vehicles_data$DEALSIZE = as.factor(Vehicles_data$DEALSIZE)

#Created dummyVars for the data
groups = dummyVars(~., data = Vehicles_data)

#applied the dummyvars to the data for use
Vehicles_data = as.data.frame(predict(groups, Vehicles_data))
```

# Question 1 Partition the Data
```{r}
#Partitioned the data in half and stratified based on the target variable
train_index = createDataPartition(Vehicles_data$STATUS, p = 0.5, list = FALSE)

#Half of the data will be used for training
trainDF = Vehicles_data[train_index,]

#The other half will be further partitioned into validation and testing
tempdf = Vehicles_data[-train_index,]

#Partitioned the remaining data into validation index of 30% stratified based on the target variable to stay consistent
validation_index = createDataPartition(tempdf$STATUS, p = 0.3, list = FALSE)

#Created the validation data frame
validationDF = tempdf[validation_index,]

#Created the testDF using the left over data
testDF = tempdf[-validation_index,]

#Removed the temp data frame 
rm(tempdf)
```

# Question 1 Normalization
```{r}
#created normalized values using z-score normalization, removing STATUS from the data first.
norm_values = preProcess(trainDF[,-6], method= c("center","scale"))

#Based on the normalized values from the training set testing, validation, and training normalized data frames are created.
#Making sure STATUS is removed from each before creation.
testDF_norm = predict(norm_values, testDF[,-6])
validationDF_norm = predict(norm_values, validationDF[,-6])
trainDF_norm = predict(norm_values, trainDF[,-6])

```

# Question 2 Predicte the status of a given vehicle
```{r}
#A new data frame containing one observation is created to see if our model can classify it correctly
new_vehicle = data.frame(
  ORDERNUMBER = 10322,
  QUANTITYORDERED=50, 
  PRICEEACH=100, 
  ORDERLINENUMBER=6, 
  SALES=12536.5, 
  QTR_ID=4, 
  MONTH_ID=11, 
  MSRP=127, 
  DEALSIZE.Large=1, 
  DEALSIZE.Small=0, 
  DEALSIZE.Medium=0
)

#A new variable is created so we are not manipulating the original
new_vehicle_norm = new_vehicle

#normalizing or new vehicle that we want to classify
new_vehicle_norm = predict(norm_values, new_vehicle_norm)

#Predicting the nearest neighbor
knn_pred_k_1 = class::knn(train = trainDF_norm, test = new_vehicle_norm, cl = trainDF$STATUS, k = 1)

#The Nearest Neighbor
knn_pred_k_1
```

```{r}
#checking for accuracy of model with training and test data
knn_Test = class::knn(train = trainDF_norm, test = testDF_norm, cl = trainDF$STATUS, k = 1)

confusionMatrix(knn_Test, as.factor(testDF$STATUS), positive = "1")
```

# Question 2 Answer
This vehicle has shipped.

# Question 3 find the suitable value for *k*
```{r}
#Created a data frame that contains values of k from 1 - 15
accuracyDF = data.frame(k = seq(1,15,1), overallAccuracy = rep(0,15))

#Using a for loop try each value of k and add to the data frame the accuracy of correct predictions
#We use the training and validation sets for this purpose so we can keep our test data unseen
for(i in 1:15) {
  
  knn_pred = class::knn(train = trainDF_norm, test = validationDF_norm, cl = trainDF$STATUS, k = i)
  
  accuracyDF[i, 2] = confusionMatrix(knn_pred, as.factor(validationDF$STATUS), positive = "1")$overall[1]
  
}
# display the value of k and the overall accuracy
accuracyDF[which(accuracyDF[,2] == max(accuracyDF[,2])),]

```
# Question 3 Answer
A suitable value for *k* that balances overfitting and underfitting is 3 which gives an overall accuracy of 0.9825871
