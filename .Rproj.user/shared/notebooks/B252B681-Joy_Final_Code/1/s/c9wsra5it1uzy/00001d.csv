"0","#Partitioned the data in half and stratified based on the target variable"
"0","train_index = createDataPartition(fuelDF_CH$fuel_type_code_pudl, p = 0.7, list = FALSE)"
"0",""
"0","#Half of the data will be used for training"
"0","trainDF = fuelDF_CH[train_index,]"
"0",""
"0","#The other half will be further partitioned into validation and testing"
"0","tempdf = fuelDF_CH[-train_index,]"
"0",""
"0","#Partitioned the remaining data into validation index of 20% stratified based on the target variable to stay consistent"
"0","validation_index = createDataPartition(tempdf$fuel_type_code_pudl, p = 0.2, list = FALSE)"
"0",""
"0","#Created the validation data frame"
"0","validationDF = tempdf[validation_index,]"
"0",""
"0","#Created the testDF using the left over data"
"0","testDF = tempdf[-validation_index,]"
"0",""
"0","#Removed the temp data frame "
"0","rm(tempdf)"
"0",""
"0","#created normalized values using z-score normalization."
"0","norm_values = preProcess(trainDF[,3:6], method= c(""center"",""scale""))"
"0",""
"0","#Based on the normalized values from the training set testing, validation, and training normalized data frames are created."
"0","testDF_norm = predict(norm_values, testDF[,(3:6)])"
"0","validationDF_norm = predict(norm_values, validationDF[,3:6])"
"0","trainDF_norm = predict(norm_values, trainDF[,3:6])"
"0",""
"0","train_labels = trainDF[,1]"
"0","test_labels = testDF[,1]"
"0","validation_labels = validationDF[,1]"
"0",""
"0","#Created a data frame that contains values of k from 1 - 15"
"0","accuracyDF = data.frame(k = seq(1,15,1), overallAccuracy = rep(0,15))"
"0",""
"0","#Using a for loop try each value of k and add to the data frame the accuracy of correct predictions"
"0","#We use the training and validation sets for this purpose so we can keep our test data unseen"
"0","for(i in 1:15) {"
"0","  "
"0","  knn_pred = class::knn(train = trainDF_norm, test = validationDF_norm, cl = trainDF$fuel_type_code_pudl, k = i)"
"0","  "
"0","  accuracyDF[i, 2] = confusionMatrix(knn_pred, as.factor(validationDF$fuel_type_code_pudl))$overall[1]"
"0","  "
"0","}"
"0","# display the value of k and the overall accuracy"
"0","accuracyDF[which(accuracyDF[,2] == max(accuracyDF[,2])),]"
